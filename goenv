#  -*- mode: unix-shell-script; -*-

_goenv_help() {
    echo "Go workspace manager"
    echo "Usage:"
    echo "   goenv command [arguments]"
    echo "The commands are:"
    echo "   init     initialize path as workspace (default working directory)"
    echo "   switch   switch workspace to path (default to working directory)"
    echo "   add      add path to workspace (default working directory)"
    echo "   rm       remove path from workspace (default working directory)"
    echo "   reset    reset to workspace to empty"
    echo "   list     list all workspace paths"
    echo "   which    show current Go workspace"
    echo "   env      environment variables for workspace"
    echo "goenv manages the workspace by setting the GOPATH environment variable"
    echo "When setting or adding a workspace, goenv will search up the path"
    echo "to find the parent with the required GOPATH entries of bin, pkg, and"
    echo "src"
}

_goenv_fullpath() {
  case "$1" in
    /*)
        echo "$1"
        ;;
    *)
        echo "$PWD/$1"
        ;;
  esac
}

_goenv_find_ws_path() {
    local WSPATH=$(pwd)
    while [[ "$WSPATH" != "" && ! -e "$WSPATH/bin" && ! -e "$WSPATH/pkg" && ! -e "$WSPATH/src" ]]; do
        WSPATH=${WSPATH%/*}
    done
    echo "$WSPATH"
}

_goenv_split() {
    OLDIFS="$IFS"
    IFS=$2
    items=(`echo $1`)
    IFS="$OLDIFS"
    echo $items
}

_goenv_init() {
    if [ -n "$1" ]; then
        mkdir -p $1/bin
        mkdir -p $1/pkg
        mkdir -p $1/src
        _goenv_switch $1
    else
        echo "Path does not exist"
    fi
}

_goenv_switch() {
    if [[ -n "$1" && -d "$1" ]]; then
        if [ -n "$GOPATH" ]; then
            _goenv_reset $@
        fi
    
        # Cache the original path
        _GOENV_OLD_PATH=$PATH
        export _GOENV_OLD_PATH

        # Set GOPATH    
        GOPATH=$1
        export GOPATH
        PATH=$PATH:$GOPATH/bin
        export PATH
    else
        echo "Go workspace missing"
    fi
}

_goenv_add() {
    if [[ -n "$1" && -d "$1" ]]; then
        if [[ -n "$GOPATH" && "$GOPATH" =~  (^|:)"$1"(:|$) ]]; then
            echo "Workspace already added"
        elif [ -z "$_GOENV_OLD_PATH" ]; then
            _goenv_switch $1
        else
            GOPATH=$GOPATH:$1
            export GOPATH
            PATH=$_GOENV_OLD_PATH:${GOPATH//://bin:}/bin
        fi
    else
        echo "Go workspace missing"
    fi
}

_goenv_rm() {
    if [[ -n "$1" && -d "$1" && -n "$GOPATH" && "$GOPATH" =~  (^|:)"$1"(:|$) ]]; then
        local items=$GOPATH
        _goenv_reset $@
        items=(`_goenv_split $items ":"`)
        for item in "${items[@]}"; do
            if [ "$item" != "$1" ]; then
                _goenv_add $item
            fi
        done
    else
        echo "Go workspace missing"
    fi
}

_goenv_reset() {
    if [ -n "$GOPATH" ]; then    
        if [ -n "$_GOENV_OLD_PATH" ]; then
            PATH=$_GOENV_OLD_PATH
            export PATH
            unset _GOENV_OLD_PATH
        fi
        unset GOPATH
    else
        echo "Go workspace not set"
    fi
}

_goenv_list() {    
    if [[ -n "$GOPATH" ]]; then
        items=(`_goenv_split $GOPATH ":"`)
        for item in "${items[@]}"; do
          echo "$item"
        done
    else
        echo "Go workspace not set"
    fi
}

_goenv_which() {
    echo `_goenv_find_ws_path`
}

_goenv_env() {
        echo "GOPATH=$GOPATH"
        echo "GOROOT=$GOROOT"        
}

_goenv_exec() {
    case "$1" in
    init)
        if [ -z "$2" ]; then
            _goenv_init $(pwd)
        else
            _goenv_init `_goenv_fullpath $2`
        fi
        ;;
    switch)
        if [ -z "$2" ]; then
            _goenv_switch `_goenv_find_ws_path`
        else
            _goenv_switch `_goenv_fullpath $2`
        fi
        ;;
    add)
        if [ -z "$2" ]; then
            _goenv_add `_goenv_find_ws_path`
        else
            _goenv_add `_goenv_fullpath $2`
        fi
        ;;
    rm)
        if [ -z "$2" ]; then
            _goenv_rm `_goenv_find_ws_path`
        else
            _goenv_rm `_goenv_fullpath $2`
        fi
        ;;
    *)
        echo "Invalid command"
    esac
}

goenv() {
    cmd=$1

    case "$cmd" in
    add | init | rm | switch)
        _goenv_exec $@
        ;;
    reset)
        _goenv_reset $@
        ;;
    list)
        _goenv_list $@
        ;;
    which)
        _goenv_which $@
        ;;
    env)
        _goenv_env $@
        ;;
    help | *)
        _goenv_help $@
        ;;
    esac
}

goenv $@
